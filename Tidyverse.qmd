---
title: "Tidyverse"
format: pdf
editor: visual
---

# 1. Conhecendo os dados

## Importar e visualizar dados

### Carregando o Tidyverse

```{r}
install.packages("tidyverse")
library(tidyverse)
```

### Carregando os dados

```{r}
transacoes_milhas <- read_csv("transacoes_milhas.csv")
```

```{r}
transacoes_passagens <- read_csv("transacoes_passagens.csv")
```

```{r}
clientes <- read_csv("clientes.csv")
```

### Analisando dados

```{r}
transacoes_milhas %>% head()
```

```{r}
transacoes_passagens %>% head()
```

```{r}
transacoes_milhas %>% glimpse()
```

```{r}
clientes %>% glimpse()
```

## Seleção e filtragem de dados

### Retomando os dados

```{r}
transacoes_milhas %>% glimpse()
```

```{r}
transacoes_passagens %>% glimpse()
```

### Selecionando colunas

```{r}
transacoes_passagens <- transacoes_passagens %>% select(id_cliente, data_transacao, milhas_utilizadas, valor_pago)
```

```{r}
transacoes_passagens %>% glimpse()
```

### Selecionando períodos

```{r}
transacoes_milhas <- transacoes_milhas %>% filter(data_venda_milhas >= '2022-01-01' & data_venda_milhas <= '2022-12-31')
```

```{r}
transacoes_milhas %>% glimpse()
```

```{r}
transacoes_passagens <- transacoes_passagens %>% filter(data_transacao >= '2022-01-01' & data_transacao <= '2022-12-31')
```

```{r}
transacoes_passagens %>% glimpse()
```

## Criar e modificar colunas com mutate

### Calculando o custo por milha

```{r}
transacoes_passagens <- transacoes_passagens %>% mutate(custo_por_milha = valor_pago / milhas_utilizadas)
```

```{r}
transacoes_passagens %>% glimpse()
```

### Calculando a média de milhas

```{r}
media_milhas <- transacoes_passagens %>% group_by(id_cliente) %>% summarize(media_milhas = mean(milhas_utilizadas))
```

```{r}
media_milhas %>% head()
```

# 2. Organizando, combinando e filtrando dataframes

## Ordenar compras de passagens por data com arrange

### Ordenando dataframes

```{r}
transacoes_passagens %>% head()
```

```{r}
transacoes_passagens <- transacoes_passagens %>% arrange(data_transacao)
```

```{r}
transacoes_passagens %>% head()
```

## Unir dados de compras e vendas com left_join

### Unindo dataframes

```{r}
transacoes_passagens <- transacoes_passagens %>% left_join(clientes, by="id_cliente")
```

### Exibindo o dataframe

```{r}
transacoes_passagens %>% head()
```

## Renomear colunas

### Função rename()

### Modificando a apresentação dos dados

```{r}
transacoes_passagens <- transacoes_passagens %>% rename(
  Data_Compra_Passagem = data_transacao,
  Milhas_Utilizadas = milhas_utilizadas,
  Valor_Pago = valor_pago,
  Custo_Por_Milha = custo_por_milha,
  Data_Nascimento = data_nascimento,
  Status_Fidelidade = status_fidelidade,
  Milhas_Acumuladas = milhas_acumuladas,
  Gasto_Total = gasto_total
)
```

```{r}
transacoes_passagens %>% head()
```

### Quantidade de passagens por cliente

```{r}
transacoes_passagens %>% count(id_cliente)
```
```{r}
transacoes_passagens %>% count(id_cliente) %>% rename(Total_Compras=n) %>% arrange(desc(Total_Compras)) %>% head()
```

# 3. Aplicando técnicas de transformação de dados

## Contar o número de compras por cliente

### Selecionando apenas colunas de interesse
```{r}
dados_milhas <- transacoes_passagens %>%
  select(id_cliente, Milhas_Utilizadas)
```

### Calculando o total de milhas usadas por cliente
```{r}
total_milhas_por_cliente <- dados_milhas %>%
  group_by(id_cliente) %>%
  summarise(total_milhas = sum(Milhas_Utilizadas, na.rm =TRUE))
```

### Exibindo clientes que mais usaram milhas
```{r}
total_milhas_por_cliente %>%
  arrange(desc(total_milhas)) %>%
  head()
```

## Criação de novas colunas e classificação

### Criando uma nova coluna de custo por milha
```{r}
transacoes_passagens <- transacoes_passagens %>% mutate(categoria_cliente = case_when(
  Milhas_Utilizadas < 2000 ~ 'Baixo',
  Milhas_Utilizadas < 5000 ~ 'Médio',
TRUE ~ 'Alto'
))
```

### Verificando o resultado
```{r}
transacoes_passagens %>% head()
```

# 4. Entendendo o comportamento do cliente

## Diferença de milhas e previsão

```{r}
transacoes_passagens <- transacoes_passagens %>%
  arrange(id_cliente, Data_Compra_Passagem) %>%
  group_by(id_cliente) %>%
  mutate(
    diferenca_milhas = Milhas_Utilizadas - lag(Milhas_Utilizadas),
    diferenca_valor_futuro = lead(Milhas_Utilizadas	)
  ) %>%
  ungroup()
```

```{r}
transacoes_passagens %>% head()
```
## Filtragem e tratamento de valores ausentes

```{r}
any(is.na(transacoes_passagens))
```
```{r}
sum(is.na(transacoes_passagens))
```
```{r}
num_clientes <- transacoes_passagens %>%
  summarise(num_clientes = n_distinct(id_cliente))
num_clientes
```
```{r}
transacoes_passagens <- transacoes_passagens %>%
  mutate(
    diferenca_milhas = coalesce(diferenca_milhas, 0),
    diferenca_valor_futuro = coalesce(diferenca_valor_futuro, 0)
  )
```

```{r}
any(is.na(transacoes_passagens))
```
```{r}
transacoes_passagens %>% arrange(desc(diferenca_milhas)) %>% head(10)
```
```{r}
transacoes_passagens %>% arrange(desc(diferenca_valor_futuro)) %>% head(10)
```
# 5. Impulsionando o crescimento com análise de clientes

## Classificar clientes com case_when e recode

### Ajuste de nomenclatura para apresentação dos resultados

```{r}
transacoes_passagens <- transacoes_passagens %>%
    mutate(categoria_cliente =
        recode (categoria_cliente,
        "Baixo" = "Iniciante",
        "Médio" = "Intermediário",
        "Alto" = "Avançado"
        )
    )
```

```{r}
transacoes_passagens %>% head()
```

## Transformar colunas em linhas com pivot_longer

### Criando o dataframe longo

```{r}
transacoes_passagens %>% select (id_cliente, Milhas_Utilizadas, Milhas_Acumuladas) %>% head ()
```
```{r}
df_long <- transacoes_passagens %>%
            pivot_longer(
            cols = starts_with("Milhas"),
            names_to = "tipo_milhas",
            values_to = "quantidade"
            )%>%
select(id_cliente, tipo_milhas, quantidade)
df_long %>% head()
```

### Agrupando dados e calculando métricas

```{r}
df_long %>%
    group_by(tipo_milhas) %>%
    summarise(
    media = mean(quantidade),
    mediana = median(quantidade),
    desvio_padrao = sd(quantidade),
)
```